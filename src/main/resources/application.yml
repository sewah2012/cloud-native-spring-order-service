server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  r2dbc:
    username: user
    password: password
    url: ${SPRING_R2DBC_URL:r2dbc:postgres://localhost:5435/polardb_order}
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: ${SPRING_FLYWAY_URL:jdbc:postgresql://localhost:5435/polardb_order}
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s
  config:
    import: ""
  #    add optional if you want to run the application without the config server: optional:configserver:.
    #    import: "configserver:"
#    import: "optional:configserver:"
  cloud:
    function:
      definition: dispatchOrder
    stream:
      bindings:
        dispatchOrder-in-0:
          destination: order-dispatched
          group: {spring.application.name}
        acceptOrder-out-0:
          destination: order-accepted
#      activate rabbit's transactional support
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true
    config:
      enabled: false
      uri: ${SPRING_CLOUD_CONFIG_URI:http://localhost:8888}
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop
management:
  endpoints:
    web:
      exposure:
        include: refresh, health
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true

logging:
#  group:
#    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
#  level:
#    circuitbreaker: info
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
my:
  clients:
    catalog-service-uri: ${CATALOG_SERVICE_URL:http://localhost:9001}


